-- Get player and character references
local player = game:GetService("Players").LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")

-- Flying variables
local isFlying = false
local flySpeed = 50
local bodyVelocity = nil

-- Function to enable flying
local function enableFlying()
    if isFlying then return end
    
    isFlying = true
    humanoid.PlatformStand = true
    
    -- Create BodyVelocity for flying
    bodyVelocity = Instance.new("BodyVelocity")
    bodyVelocity.Velocity = Vector3.new(0, 0, 0)
    bodyVelocity.MaxForce = Vector3.new(0, 0, 0)
    bodyVelocity.P = 1000
    bodyVelocity.Parent = character:FindFirstChild("HumanoidRootPart")
    
    -- Update velocity based on camera direction
    local userInputService = game:GetService("UserInputService")
    local camera = workspace.CurrentCamera
    
    local connection
    connection = game:GetService("RunService").Heartbeat:Connect(function()
        if not isFlying or not character:FindFirstChild("HumanoidRootPart") then
            connection:Disconnect()
            return
        end
        
        local rootPart = character.HumanoidRootPart
        local direction = Vector3.new(0, 0, 0)
        
        -- Get input for movement
        if userInputService:IsKeyDown(Enum.KeyCode.W) then
            direction = direction + camera.CFrame.LookVector
        end
        if userInputService:IsKeyDown(Enum.KeyCode.S) then
            direction = direction - camera.CFrame.LookVector
        end
        if userInputService:IsKeyDown(Enum.KeyCode.A) then
            direction = direction - camera.CFrame.RightVector
        end
        if userInputService:IsKeyDown(Enum.KeyCode.D) then
            direction = direction + camera.CFrame.RightVector
        end
        if userInputService:IsKeyDown(Enum.KeyCode.Space) then
            direction = direction + Vector3.new(0, 1, 0)
        end
        if userInputService:IsKeyDown(Enum.KeyCode.LeftShift) then
            direction = direction - Vector3.new(0, 1, 0)
        end
        
        -- Normalize and apply speed
        if direction.Magnitude > 0 then
            direction = direction.Unit * flySpeed
        end
        
        bodyVelocity.Velocity = direction
    end)
end

-- Function to disable flying
local function disableFlying()
    if not isFlying then return end
    
    isFlying = false
    humanoid.PlatformStand = false
    
    if bodyVelocity then
        bodyVelocity:Destroy()
        bodyVelocity = nil
    end
end

-- Toggle flying on E key press
local function onKeyPress(input, gameProcessed)
    if gameProcessed then return end
    
    if input.KeyCode == Enum.KeyCode.E then
        if isFlying then
            disableFlying()
        else
            enableFlying()
        end
    end
end

-- Set up input connection
game:GetService("UserInputService").InputBegan:Connect(onKeyPress)

-- Clean up when character dies or respawns
player.CharacterAdded:Connect(function(newCharacter)
    character = newCharacter
    humanoid = character:WaitForChild("Humanoid")
    disableFlying() -- Ensure flying is off when character respawns
end)

-- Disable flying when script is destroyed
script.Destroying:Connect(disableFlying)
